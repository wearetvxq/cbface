# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VisitorsListResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, interviewed: str=None, team: str=None, total: int=None, status: str=None, visiting: str=None, leave: str=None):  # noqa: E501
        """VisitorsListResult - a model defined in Swagger

        :param id: The id of this VisitorsListResult.  # noqa: E501
        :type id: int
        :param name: The name of this VisitorsListResult.  # noqa: E501
        :type name: str
        :param interviewed: The interviewed of this VisitorsListResult.  # noqa: E501
        :type interviewed: str
        :param team: The team of this VisitorsListResult.  # noqa: E501
        :type team: str
        :param total: The total of this VisitorsListResult.  # noqa: E501
        :type total: int
        :param status: The status of this VisitorsListResult.  # noqa: E501
        :type status: str
        :param visiting: The visiting of this VisitorsListResult.  # noqa: E501
        :type visiting: str
        :param leave: The leave of this VisitorsListResult.  # noqa: E501
        :type leave: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'interviewed': str,
            'team': str,
            'total': int,
            'status': str,
            'visiting': str,
            'leave': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'interviewed': 'interviewed',
            'team': 'team',
            'total': 'total',
            'status': 'status',
            'visiting': 'visiting',
            'leave': 'leave'
        }

        self._id = id
        self._name = name
        self._interviewed = interviewed
        self._team = team
        self._total = total
        self._status = status
        self._visiting = visiting
        self._leave = leave

    @classmethod
    def from_dict(cls, dikt) -> 'VisitorsListResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VisitorsListResult of this VisitorsListResult.  # noqa: E501
        :rtype: VisitorsListResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this VisitorsListResult.

        Guest ID  # noqa: E501

        :return: The id of this VisitorsListResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this VisitorsListResult.

        Guest ID  # noqa: E501

        :param id: The id of this VisitorsListResult.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this VisitorsListResult.

        Guest name  # noqa: E501

        :return: The name of this VisitorsListResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this VisitorsListResult.

        Guest name  # noqa: E501

        :param name: The name of this VisitorsListResult.
        :type name: str
        """

        self._name = name

    @property
    def interviewed(self) -> str:
        """Gets the interviewed of this VisitorsListResult.

        Interviewed  # noqa: E501

        :return: The interviewed of this VisitorsListResult.
        :rtype: str
        """
        return self._interviewed

    @interviewed.setter
    def interviewed(self, interviewed: str):
        """Sets the interviewed of this VisitorsListResult.

        Interviewed  # noqa: E501

        :param interviewed: The interviewed of this VisitorsListResult.
        :type interviewed: str
        """

        self._interviewed = interviewed

    @property
    def team(self) -> str:
        """Gets the team of this VisitorsListResult.

        Interviewed team  # noqa: E501

        :return: The team of this VisitorsListResult.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team: str):
        """Sets the team of this VisitorsListResult.

        Interviewed team  # noqa: E501

        :param team: The team of this VisitorsListResult.
        :type team: str
        """

        self._team = team

    @property
    def total(self) -> int:
        """Gets the total of this VisitorsListResult.

        Visitors total  # noqa: E501

        :return: The total of this VisitorsListResult.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this VisitorsListResult.

        Visitors total  # noqa: E501

        :param total: The total of this VisitorsListResult.
        :type total: int
        """

        self._total = total

    @property
    def status(self) -> str:
        """Gets the status of this VisitorsListResult.

        Visitor status  # noqa: E501

        :return: The status of this VisitorsListResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this VisitorsListResult.

        Visitor status  # noqa: E501

        :param status: The status of this VisitorsListResult.
        :type status: str
        """

        self._status = status

    @property
    def visiting(self) -> str:
        """Gets the visiting of this VisitorsListResult.

        Visiting time  # noqa: E501

        :return: The visiting of this VisitorsListResult.
        :rtype: str
        """
        return self._visiting

    @visiting.setter
    def visiting(self, visiting: str):
        """Sets the visiting of this VisitorsListResult.

        Visiting time  # noqa: E501

        :param visiting: The visiting of this VisitorsListResult.
        :type visiting: str
        """

        self._visiting = visiting

    @property
    def leave(self) -> str:
        """Gets the leave of this VisitorsListResult.

        leave time  # noqa: E501

        :return: The leave of this VisitorsListResult.
        :rtype: str
        """
        return self._leave

    @leave.setter
    def leave(self, leave: str):
        """Sets the leave of this VisitorsListResult.

        leave time  # noqa: E501

        :param leave: The leave of this VisitorsListResult.
        :type leave: str
        """

        self._leave = leave
