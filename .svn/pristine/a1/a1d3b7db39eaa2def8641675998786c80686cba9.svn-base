# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.inline_response2001_day import InlineResponse2001Day  # noqa: F401,E501
from swagger_server import util


class HomePieChart(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, msg: str=None, day: List[InlineResponse2001Day]=None, morning: List[InlineResponse2001Day]=None, afternoon: List[InlineResponse2001Day]=None):  # noqa: E501
        """HomePieChart - a model defined in Swagger

        :param code: The code of this HomePieChart.  # noqa: E501
        :type code: int
        :param msg: The msg of this HomePieChart.  # noqa: E501
        :type msg: str
        :param day: The day of this HomePieChart.  # noqa: E501
        :type day: List[InlineResponse2001Day]
        :param morning: The morning of this HomePieChart.  # noqa: E501
        :type morning: List[InlineResponse2001Day]
        :param afternoon: The afternoon of this HomePieChart.  # noqa: E501
        :type afternoon: List[InlineResponse2001Day]
        """
        self.swagger_types = {
            'code': int,
            'msg': str,
            'day': List[InlineResponse2001Day],
            'morning': List[InlineResponse2001Day],
            'afternoon': List[InlineResponse2001Day]
        }

        self.attribute_map = {
            'code': 'code',
            'msg': 'msg',
            'day': 'day',
            'morning': 'morning',
            'afternoon': 'afternoon'
        }

        self._code = code
        self._msg = msg
        self._day = day
        self._morning = morning
        self._afternoon = afternoon

    @classmethod
    def from_dict(cls, dikt) -> 'HomePieChart':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HomePieChart of this HomePieChart.  # noqa: E501
        :rtype: HomePieChart
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> int:
        """Gets the code of this HomePieChart.

        system return code  # noqa: E501

        :return: The code of this HomePieChart.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code: int):
        """Sets the code of this HomePieChart.

        system return code  # noqa: E501

        :param code: The code of this HomePieChart.
        :type code: int
        """

        self._code = code

    @property
    def msg(self) -> str:
        """Gets the msg of this HomePieChart.

        system return news  # noqa: E501

        :return: The msg of this HomePieChart.
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg: str):
        """Sets the msg of this HomePieChart.

        system return news  # noqa: E501

        :param msg: The msg of this HomePieChart.
        :type msg: str
        """

        self._msg = msg

    @property
    def day(self) -> List[InlineResponse2001Day]:
        """Gets the day of this HomePieChart.


        :return: The day of this HomePieChart.
        :rtype: List[InlineResponse2001Day]
        """
        return self._day

    @day.setter
    def day(self, day: List[InlineResponse2001Day]):
        """Sets the day of this HomePieChart.


        :param day: The day of this HomePieChart.
        :type day: List[InlineResponse2001Day]
        """

        self._day = day

    @property
    def morning(self) -> List[InlineResponse2001Day]:
        """Gets the morning of this HomePieChart.


        :return: The morning of this HomePieChart.
        :rtype: List[InlineResponse2001Day]
        """
        return self._morning

    @morning.setter
    def morning(self, morning: List[InlineResponse2001Day]):
        """Sets the morning of this HomePieChart.


        :param morning: The morning of this HomePieChart.
        :type morning: List[InlineResponse2001Day]
        """

        self._morning = morning

    @property
    def afternoon(self) -> List[InlineResponse2001Day]:
        """Gets the afternoon of this HomePieChart.


        :return: The afternoon of this HomePieChart.
        :rtype: List[InlineResponse2001Day]
        """
        return self._afternoon

    @afternoon.setter
    def afternoon(self, afternoon: List[InlineResponse2001Day]):
        """Sets the afternoon of this HomePieChart.


        :param afternoon: The afternoon of this HomePieChart.
        :type afternoon: List[InlineResponse2001Day]
        """

        self._afternoon = afternoon
