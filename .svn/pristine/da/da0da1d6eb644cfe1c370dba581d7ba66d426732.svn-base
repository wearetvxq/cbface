# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Body10(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, status: int=None, level: int=None, type: int=None, pid: int=None, router: str=None, desc: str=None):  # noqa: E501
        """Body10 - a model defined in Swagger

        :param id: The id of this Body10.  # noqa: E501
        :type id: int
        :param name: The name of this Body10.  # noqa: E501
        :type name: str
        :param status: The status of this Body10.  # noqa: E501
        :type status: int
        :param level: The level of this Body10.  # noqa: E501
        :type level: int
        :param type: The type of this Body10.  # noqa: E501
        :type type: int
        :param pid: The pid of this Body10.  # noqa: E501
        :type pid: int
        :param router: The router of this Body10.  # noqa: E501
        :type router: str
        :param desc: The desc of this Body10.  # noqa: E501
        :type desc: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'status': int,
            'level': int,
            'type': int,
            'pid': int,
            'router': str,
            'desc': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'status': 'status',
            'level': 'level',
            'type': 'type',
            'pid': 'pid',
            'router': 'router',
            'desc': 'desc'
        }

        self._id = id
        self._name = name
        self._status = status
        self._level = level
        self._type = type
        self._pid = pid
        self._router = router
        self._desc = desc

    @classmethod
    def from_dict(cls, dikt) -> 'Body10':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body_10 of this Body10.  # noqa: E501
        :rtype: Body10
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Body10.

        user id  # noqa: E501

        :return: The id of this Body10.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Body10.

        user id  # noqa: E501

        :param id: The id of this Body10.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Body10.

        access name  # noqa: E501

        :return: The name of this Body10.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Body10.

        access name  # noqa: E501

        :param name: The name of this Body10.
        :type name: str
        """

        self._name = name

    @property
    def status(self) -> int:
        """Gets the status of this Body10.

        access status  # noqa: E501

        :return: The status of this Body10.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this Body10.

        access status  # noqa: E501

        :param status: The status of this Body10.
        :type status: int
        """

        self._status = status

    @property
    def level(self) -> int:
        """Gets the level of this Body10.

        access level  # noqa: E501

        :return: The level of this Body10.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level: int):
        """Sets the level of this Body10.

        access level  # noqa: E501

        :param level: The level of this Body10.
        :type level: int
        """

        self._level = level

    @property
    def type(self) -> int:
        """Gets the type of this Body10.

        access type  # noqa: E501

        :return: The type of this Body10.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type: int):
        """Sets the type of this Body10.

        access type  # noqa: E501

        :param type: The type of this Body10.
        :type type: int
        """

        self._type = type

    @property
    def pid(self) -> int:
        """Gets the pid of this Body10.

        access pid  # noqa: E501

        :return: The pid of this Body10.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid: int):
        """Sets the pid of this Body10.

        access pid  # noqa: E501

        :param pid: The pid of this Body10.
        :type pid: int
        """

        self._pid = pid

    @property
    def router(self) -> str:
        """Gets the router of this Body10.

        access router  # noqa: E501

        :return: The router of this Body10.
        :rtype: str
        """
        return self._router

    @router.setter
    def router(self, router: str):
        """Sets the router of this Body10.

        access router  # noqa: E501

        :param router: The router of this Body10.
        :type router: str
        """

        self._router = router

    @property
    def desc(self) -> str:
        """Gets the desc of this Body10.

        access esc  # noqa: E501

        :return: The desc of this Body10.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc: str):
        """Sets the desc of this Body10.

        access esc  # noqa: E501

        :param desc: The desc of this Body10.
        :type desc: str
        """

        self._desc = desc
