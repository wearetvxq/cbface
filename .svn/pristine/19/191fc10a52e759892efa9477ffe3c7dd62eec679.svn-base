# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.monitor_pic import MonitorPic  # noqa: F401,E501
from swagger_server import util


class MonitorUpdate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, visit_id: str=None, username: str=None, posttime: str=None, purpose: int=None, total: str=None, phone: str=None, interviewed: str=None, team: int=None, pic: List[MonitorPic]=None):  # noqa: E501
        """MonitorUpdate - a model defined in Swagger

        :param id: The id of this MonitorUpdate.  # noqa: E501
        :type id: int
        :param visit_id: The visit_id of this MonitorUpdate.  # noqa: E501
        :type visit_id: str
        :param username: The username of this MonitorUpdate.  # noqa: E501
        :type username: str
        :param posttime: The posttime of this MonitorUpdate.  # noqa: E501
        :type posttime: str
        :param purpose: The purpose of this MonitorUpdate.  # noqa: E501
        :type purpose: int
        :param total: The total of this MonitorUpdate.  # noqa: E501
        :type total: str
        :param phone: The phone of this MonitorUpdate.  # noqa: E501
        :type phone: str
        :param interviewed: The interviewed of this MonitorUpdate.  # noqa: E501
        :type interviewed: str
        :param team: The team of this MonitorUpdate.  # noqa: E501
        :type team: int
        :param pic: The pic of this MonitorUpdate.  # noqa: E501
        :type pic: List[MonitorPic]
        """
        self.swagger_types = {
            'id': int,
            'visit_id': str,
            'username': str,
            'posttime': str,
            'purpose': int,
            'total': str,
            'phone': str,
            'interviewed': str,
            'team': int,
            'pic': List[MonitorPic]
        }

        self.attribute_map = {
            'id': 'id',
            'visit_id': 'visitId',
            'username': 'username',
            'posttime': 'posttime',
            'purpose': 'purpose',
            'total': 'total',
            'phone': 'phone',
            'interviewed': 'interviewed',
            'team': 'team',
            'pic': 'pic'
        }

        self._id = id
        self._visit_id = visit_id
        self._username = username
        self._posttime = posttime
        self._purpose = purpose
        self._total = total
        self._phone = phone
        self._interviewed = interviewed
        self._team = team
        self._pic = pic

    @classmethod
    def from_dict(cls, dikt) -> 'MonitorUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MonitorUpdate of this MonitorUpdate.  # noqa: E501
        :rtype: MonitorUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this MonitorUpdate.

        log id  # noqa: E501

        :return: The id of this MonitorUpdate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this MonitorUpdate.

        log id  # noqa: E501

        :param id: The id of this MonitorUpdate.
        :type id: int
        """

        self._id = id

    @property
    def visit_id(self) -> str:
        """Gets the visit_id of this MonitorUpdate.

        username  # noqa: E501

        :return: The visit_id of this MonitorUpdate.
        :rtype: str
        """
        return self._visit_id

    @visit_id.setter
    def visit_id(self, visit_id: str):
        """Sets the visit_id of this MonitorUpdate.

        username  # noqa: E501

        :param visit_id: The visit_id of this MonitorUpdate.
        :type visit_id: str
        """

        self._visit_id = visit_id

    @property
    def username(self) -> str:
        """Gets the username of this MonitorUpdate.

        username  # noqa: E501

        :return: The username of this MonitorUpdate.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this MonitorUpdate.

        username  # noqa: E501

        :param username: The username of this MonitorUpdate.
        :type username: str
        """

        self._username = username

    @property
    def posttime(self) -> str:
        """Gets the posttime of this MonitorUpdate.

        posttime  # noqa: E501

        :return: The posttime of this MonitorUpdate.
        :rtype: str
        """
        return self._posttime

    @posttime.setter
    def posttime(self, posttime: str):
        """Sets the posttime of this MonitorUpdate.

        posttime  # noqa: E501

        :param posttime: The posttime of this MonitorUpdate.
        :type posttime: str
        """

        self._posttime = posttime

    @property
    def purpose(self) -> int:
        """Gets the purpose of this MonitorUpdate.

        purpose  # noqa: E501

        :return: The purpose of this MonitorUpdate.
        :rtype: int
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose: int):
        """Sets the purpose of this MonitorUpdate.

        purpose  # noqa: E501

        :param purpose: The purpose of this MonitorUpdate.
        :type purpose: int
        """

        self._purpose = purpose

    @property
    def total(self) -> str:
        """Gets the total of this MonitorUpdate.

        Visitors  # noqa: E501

        :return: The total of this MonitorUpdate.
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total: str):
        """Sets the total of this MonitorUpdate.

        Visitors  # noqa: E501

        :param total: The total of this MonitorUpdate.
        :type total: str
        """

        self._total = total

    @property
    def phone(self) -> str:
        """Gets the phone of this MonitorUpdate.

        phone  # noqa: E501

        :return: The phone of this MonitorUpdate.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this MonitorUpdate.

        phone  # noqa: E501

        :param phone: The phone of this MonitorUpdate.
        :type phone: str
        """

        self._phone = phone

    @property
    def interviewed(self) -> str:
        """Gets the interviewed of this MonitorUpdate.

        interviewed  # noqa: E501

        :return: The interviewed of this MonitorUpdate.
        :rtype: str
        """
        return self._interviewed

    @interviewed.setter
    def interviewed(self, interviewed: str):
        """Sets the interviewed of this MonitorUpdate.

        interviewed  # noqa: E501

        :param interviewed: The interviewed of this MonitorUpdate.
        :type interviewed: str
        """

        self._interviewed = interviewed

    @property
    def team(self) -> int:
        """Gets the team of this MonitorUpdate.

        Respondent department  # noqa: E501

        :return: The team of this MonitorUpdate.
        :rtype: int
        """
        return self._team

    @team.setter
    def team(self, team: int):
        """Sets the team of this MonitorUpdate.

        Respondent department  # noqa: E501

        :param team: The team of this MonitorUpdate.
        :type team: int
        """

        self._team = team

    @property
    def pic(self) -> List[MonitorPic]:
        """Gets the pic of this MonitorUpdate.


        :return: The pic of this MonitorUpdate.
        :rtype: List[MonitorPic]
        """
        return self._pic

    @pic.setter
    def pic(self, pic: List[MonitorPic]):
        """Sets the pic of this MonitorUpdate.


        :param pic: The pic of this MonitorUpdate.
        :type pic: List[MonitorPic]
        """

        self._pic = pic
