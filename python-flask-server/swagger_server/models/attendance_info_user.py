# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AttendanceInfoUser(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, normal: int=None, late: int=None, retreat: int=None):  # noqa: E501
        """AttendanceInfoUser - a model defined in Swagger

        :param username: The username of this AttendanceInfoUser.  # noqa: E501
        :type username: str
        :param normal: The normal of this AttendanceInfoUser.  # noqa: E501
        :type normal: int
        :param late: The late of this AttendanceInfoUser.  # noqa: E501
        :type late: int
        :param retreat: The retreat of this AttendanceInfoUser.  # noqa: E501
        :type retreat: int
        """
        self.swagger_types = {
            'username': str,
            'normal': int,
            'late': int,
            'retreat': int
        }

        self.attribute_map = {
            'username': 'username',
            'normal': 'normal',
            'late': 'late',
            'retreat': 'retreat'
        }

        self._username = username
        self._normal = normal
        self._late = late
        self._retreat = retreat

    @classmethod
    def from_dict(cls, dikt) -> 'AttendanceInfoUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AttendanceInfoUser of this AttendanceInfoUser.  # noqa: E501
        :rtype: AttendanceInfoUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this AttendanceInfoUser.

        username  # noqa: E501

        :return: The username of this AttendanceInfoUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this AttendanceInfoUser.

        username  # noqa: E501

        :param username: The username of this AttendanceInfoUser.
        :type username: str
        """

        self._username = username

    @property
    def normal(self) -> int:
        """Gets the normal of this AttendanceInfoUser.

        normal  # noqa: E501

        :return: The normal of this AttendanceInfoUser.
        :rtype: int
        """
        return self._normal

    @normal.setter
    def normal(self, normal: int):
        """Sets the normal of this AttendanceInfoUser.

        normal  # noqa: E501

        :param normal: The normal of this AttendanceInfoUser.
        :type normal: int
        """

        self._normal = normal

    @property
    def late(self) -> int:
        """Gets the late of this AttendanceInfoUser.

        late  # noqa: E501

        :return: The late of this AttendanceInfoUser.
        :rtype: int
        """
        return self._late

    @late.setter
    def late(self, late: int):
        """Sets the late of this AttendanceInfoUser.

        late  # noqa: E501

        :param late: The late of this AttendanceInfoUser.
        :type late: int
        """

        self._late = late

    @property
    def retreat(self) -> int:
        """Gets the retreat of this AttendanceInfoUser.

        Leave early  # noqa: E501

        :return: The retreat of this AttendanceInfoUser.
        :rtype: int
        """
        return self._retreat

    @retreat.setter
    def retreat(self, retreat: int):
        """Sets the retreat of this AttendanceInfoUser.

        Leave early  # noqa: E501

        :param retreat: The retreat of this AttendanceInfoUser.
        :type retreat: int
        """

        self._retreat = retreat
