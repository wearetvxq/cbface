# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse2004Result(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, team: str=None, normal: int=None, late: int=None, leave: int=None, absence: int=None):  # noqa: E501
        """InlineResponse2004Result - a model defined in Swagger

        :param id: The id of this InlineResponse2004Result.  # noqa: E501
        :type id: int
        :param name: The name of this InlineResponse2004Result.  # noqa: E501
        :type name: str
        :param team: The team of this InlineResponse2004Result.  # noqa: E501
        :type team: str
        :param normal: The normal of this InlineResponse2004Result.  # noqa: E501
        :type normal: int
        :param late: The late of this InlineResponse2004Result.  # noqa: E501
        :type late: int
        :param leave: The leave of this InlineResponse2004Result.  # noqa: E501
        :type leave: int
        :param absence: The absence of this InlineResponse2004Result.  # noqa: E501
        :type absence: int
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'team': str,
            'normal': int,
            'late': int,
            'leave': int,
            'absence': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'team': 'team',
            'normal': 'normal',
            'late': 'late',
            'leave': 'leave',
            'absence': 'absence'
        }

        self._id = id
        self._name = name
        self._team = team
        self._normal = normal
        self._late = late
        self._leave = leave
        self._absence = absence

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2004Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_4_result of this InlineResponse2004Result.  # noqa: E501
        :rtype: InlineResponse2004Result
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this InlineResponse2004Result.

        list ID  # noqa: E501

        :return: The id of this InlineResponse2004Result.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this InlineResponse2004Result.

        list ID  # noqa: E501

        :param id: The id of this InlineResponse2004Result.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this InlineResponse2004Result.

        Employee name  # noqa: E501

        :return: The name of this InlineResponse2004Result.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this InlineResponse2004Result.

        Employee name  # noqa: E501

        :param name: The name of this InlineResponse2004Result.
        :type name: str
        """

        self._name = name

    @property
    def team(self) -> str:
        """Gets the team of this InlineResponse2004Result.

        Own team  # noqa: E501

        :return: The team of this InlineResponse2004Result.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team: str):
        """Sets the team of this InlineResponse2004Result.

        Own team  # noqa: E501

        :param team: The team of this InlineResponse2004Result.
        :type team: str
        """

        self._team = team

    @property
    def normal(self) -> int:
        """Gets the normal of this InlineResponse2004Result.

        Normal days  # noqa: E501

        :return: The normal of this InlineResponse2004Result.
        :rtype: int
        """
        return self._normal

    @normal.setter
    def normal(self, normal: int):
        """Sets the normal of this InlineResponse2004Result.

        Normal days  # noqa: E501

        :param normal: The normal of this InlineResponse2004Result.
        :type normal: int
        """

        self._normal = normal

    @property
    def late(self) -> int:
        """Gets the late of this InlineResponse2004Result.

        late num  # noqa: E501

        :return: The late of this InlineResponse2004Result.
        :rtype: int
        """
        return self._late

    @late.setter
    def late(self, late: int):
        """Sets the late of this InlineResponse2004Result.

        late num  # noqa: E501

        :param late: The late of this InlineResponse2004Result.
        :type late: int
        """

        self._late = late

    @property
    def leave(self) -> int:
        """Gets the leave of this InlineResponse2004Result.

        Leave early  # noqa: E501

        :return: The leave of this InlineResponse2004Result.
        :rtype: int
        """
        return self._leave

    @leave.setter
    def leave(self, leave: int):
        """Sets the leave of this InlineResponse2004Result.

        Leave early  # noqa: E501

        :param leave: The leave of this InlineResponse2004Result.
        :type leave: int
        """

        self._leave = leave

    @property
    def absence(self) -> int:
        """Gets the absence of this InlineResponse2004Result.

        Absence early  # noqa: E501

        :return: The absence of this InlineResponse2004Result.
        :rtype: int
        """
        return self._absence

    @absence.setter
    def absence(self, absence: int):
        """Sets the absence of this InlineResponse2004Result.

        Absence early  # noqa: E501

        :param absence: The absence of this InlineResponse2004Result.
        :type absence: int
        """

        self._absence = absence
