# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VisitorsListBasic(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, visiting: str=None, leave: str=None, purpose: str=None, phone: str=None, interviewed: str=None, team: str=None, vip: str=None, remarks: str=None):  # noqa: E501
        """VisitorsListBasic - a model defined in Swagger

        :param username: The username of this VisitorsListBasic.  # noqa: E501
        :type username: str
        :param visiting: The visiting of this VisitorsListBasic.  # noqa: E501
        :type visiting: str
        :param leave: The leave of this VisitorsListBasic.  # noqa: E501
        :type leave: str
        :param purpose: The purpose of this VisitorsListBasic.  # noqa: E501
        :type purpose: str
        :param phone: The phone of this VisitorsListBasic.  # noqa: E501
        :type phone: str
        :param interviewed: The interviewed of this VisitorsListBasic.  # noqa: E501
        :type interviewed: str
        :param team: The team of this VisitorsListBasic.  # noqa: E501
        :type team: str
        :param vip: The vip of this VisitorsListBasic.  # noqa: E501
        :type vip: str
        :param remarks: The remarks of this VisitorsListBasic.  # noqa: E501
        :type remarks: str
        """
        self.swagger_types = {
            'username': str,
            'visiting': str,
            'leave': str,
            'purpose': str,
            'phone': str,
            'interviewed': str,
            'team': str,
            'vip': str,
            'remarks': str
        }

        self.attribute_map = {
            'username': 'username',
            'visiting': 'visiting',
            'leave': 'leave',
            'purpose': 'purpose',
            'phone': 'phone',
            'interviewed': 'interviewed',
            'team': 'team',
            'vip': 'vip',
            'remarks': 'remarks'
        }

        self._username = username
        self._visiting = visiting
        self._leave = leave
        self._purpose = purpose
        self._phone = phone
        self._interviewed = interviewed
        self._team = team
        self._vip = vip
        self._remarks = remarks

    @classmethod
    def from_dict(cls, dikt) -> 'VisitorsListBasic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VisitorsListBasic of this VisitorsListBasic.  # noqa: E501
        :rtype: VisitorsListBasic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this VisitorsListBasic.

        username  # noqa: E501

        :return: The username of this VisitorsListBasic.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this VisitorsListBasic.

        username  # noqa: E501

        :param username: The username of this VisitorsListBasic.
        :type username: str
        """

        self._username = username

    @property
    def visiting(self) -> str:
        """Gets the visiting of this VisitorsListBasic.

        Visiting time  # noqa: E501

        :return: The visiting of this VisitorsListBasic.
        :rtype: str
        """
        return self._visiting

    @visiting.setter
    def visiting(self, visiting: str):
        """Sets the visiting of this VisitorsListBasic.

        Visiting time  # noqa: E501

        :param visiting: The visiting of this VisitorsListBasic.
        :type visiting: str
        """

        self._visiting = visiting

    @property
    def leave(self) -> str:
        """Gets the leave of this VisitorsListBasic.

        leave time  # noqa: E501

        :return: The leave of this VisitorsListBasic.
        :rtype: str
        """
        return self._leave

    @leave.setter
    def leave(self, leave: str):
        """Sets the leave of this VisitorsListBasic.

        leave time  # noqa: E501

        :param leave: The leave of this VisitorsListBasic.
        :type leave: str
        """

        self._leave = leave

    @property
    def purpose(self) -> str:
        """Gets the purpose of this VisitorsListBasic.

        Visiting purpose  # noqa: E501

        :return: The purpose of this VisitorsListBasic.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose: str):
        """Sets the purpose of this VisitorsListBasic.

        Visiting purpose  # noqa: E501

        :param purpose: The purpose of this VisitorsListBasic.
        :type purpose: str
        """

        self._purpose = purpose

    @property
    def phone(self) -> str:
        """Gets the phone of this VisitorsListBasic.

        Contact information  # noqa: E501

        :return: The phone of this VisitorsListBasic.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this VisitorsListBasic.

        Contact information  # noqa: E501

        :param phone: The phone of this VisitorsListBasic.
        :type phone: str
        """

        self._phone = phone

    @property
    def interviewed(self) -> str:
        """Gets the interviewed of this VisitorsListBasic.

        Interviewed  # noqa: E501

        :return: The interviewed of this VisitorsListBasic.
        :rtype: str
        """
        return self._interviewed

    @interviewed.setter
    def interviewed(self, interviewed: str):
        """Sets the interviewed of this VisitorsListBasic.

        Interviewed  # noqa: E501

        :param interviewed: The interviewed of this VisitorsListBasic.
        :type interviewed: str
        """

        self._interviewed = interviewed

    @property
    def team(self) -> str:
        """Gets the team of this VisitorsListBasic.

        Their department  # noqa: E501

        :return: The team of this VisitorsListBasic.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team: str):
        """Sets the team of this VisitorsListBasic.

        Their department  # noqa: E501

        :param team: The team of this VisitorsListBasic.
        :type team: str
        """

        self._team = team

    @property
    def vip(self) -> str:
        """Gets the vip of this VisitorsListBasic.

        Yes No vip  # noqa: E501

        :return: The vip of this VisitorsListBasic.
        :rtype: str
        """
        return self._vip

    @vip.setter
    def vip(self, vip: str):
        """Sets the vip of this VisitorsListBasic.

        Yes No vip  # noqa: E501

        :param vip: The vip of this VisitorsListBasic.
        :type vip: str
        """

        self._vip = vip

    @property
    def remarks(self) -> str:
        """Gets the remarks of this VisitorsListBasic.

        Remarks  # noqa: E501

        :return: The remarks of this VisitorsListBasic.
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks: str):
        """Sets the remarks of this VisitorsListBasic.

        Remarks  # noqa: E501

        :param remarks: The remarks of this VisitorsListBasic.
        :type remarks: str
        """

        self._remarks = remarks
