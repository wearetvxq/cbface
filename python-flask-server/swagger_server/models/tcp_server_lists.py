# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.inline_response20019_pic_list import InlineResponse20019PicList  # noqa: F401,E501
from swagger_server import util


class TcpServerLists(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, cam_id: str=None, record_id: str=None, tollgate_id: str=None, pass_time: str=None, pic_number: str=None, image_type: str=None, image_format: str=None, status: str=None, pic_list: List[InlineResponse20019PicList]=None):  # noqa: E501
        """TcpServerLists - a model defined in Swagger

        :param cam_id: The cam_id of this TcpServerLists.  # noqa: E501
        :type cam_id: str
        :param record_id: The record_id of this TcpServerLists.  # noqa: E501
        :type record_id: str
        :param tollgate_id: The tollgate_id of this TcpServerLists.  # noqa: E501
        :type tollgate_id: str
        :param pass_time: The pass_time of this TcpServerLists.  # noqa: E501
        :type pass_time: str
        :param pic_number: The pic_number of this TcpServerLists.  # noqa: E501
        :type pic_number: str
        :param image_type: The image_type of this TcpServerLists.  # noqa: E501
        :type image_type: str
        :param image_format: The image_format of this TcpServerLists.  # noqa: E501
        :type image_format: str
        :param status: The status of this TcpServerLists.  # noqa: E501
        :type status: str
        :param pic_list: The pic_list of this TcpServerLists.  # noqa: E501
        :type pic_list: List[InlineResponse20019PicList]
        """
        self.swagger_types = {
            'cam_id': str,
            'record_id': str,
            'tollgate_id': str,
            'pass_time': str,
            'pic_number': str,
            'image_type': str,
            'image_format': str,
            'status': str,
            'pic_list': List[InlineResponse20019PicList]
        }

        self.attribute_map = {
            'cam_id': 'CamID',
            'record_id': 'RecordID',
            'tollgate_id': 'TollgateID',
            'pass_time': 'PassTime',
            'pic_number': 'PicNumber',
            'image_type': 'ImageType',
            'image_format': 'ImageFormat',
            'status': 'status',
            'pic_list': 'picList'
        }

        self._cam_id = cam_id
        self._record_id = record_id
        self._tollgate_id = tollgate_id
        self._pass_time = pass_time
        self._pic_number = pic_number
        self._image_type = image_type
        self._image_format = image_format
        self._status = status
        self._pic_list = pic_list

    @classmethod
    def from_dict(cls, dikt) -> 'TcpServerLists':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TcpServerLists of this TcpServerLists.  # noqa: E501
        :rtype: TcpServerLists
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cam_id(self) -> str:
        """Gets the cam_id of this TcpServerLists.

        camid  # noqa: E501

        :return: The cam_id of this TcpServerLists.
        :rtype: str
        """
        return self._cam_id

    @cam_id.setter
    def cam_id(self, cam_id: str):
        """Sets the cam_id of this TcpServerLists.

        camid  # noqa: E501

        :param cam_id: The cam_id of this TcpServerLists.
        :type cam_id: str
        """

        self._cam_id = cam_id

    @property
    def record_id(self) -> str:
        """Gets the record_id of this TcpServerLists.

        RecordID  # noqa: E501

        :return: The record_id of this TcpServerLists.
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id: str):
        """Sets the record_id of this TcpServerLists.

        RecordID  # noqa: E501

        :param record_id: The record_id of this TcpServerLists.
        :type record_id: str
        """

        self._record_id = record_id

    @property
    def tollgate_id(self) -> str:
        """Gets the tollgate_id of this TcpServerLists.

        TollgateID  # noqa: E501

        :return: The tollgate_id of this TcpServerLists.
        :rtype: str
        """
        return self._tollgate_id

    @tollgate_id.setter
    def tollgate_id(self, tollgate_id: str):
        """Sets the tollgate_id of this TcpServerLists.

        TollgateID  # noqa: E501

        :param tollgate_id: The tollgate_id of this TcpServerLists.
        :type tollgate_id: str
        """

        self._tollgate_id = tollgate_id

    @property
    def pass_time(self) -> str:
        """Gets the pass_time of this TcpServerLists.

        PassTime  # noqa: E501

        :return: The pass_time of this TcpServerLists.
        :rtype: str
        """
        return self._pass_time

    @pass_time.setter
    def pass_time(self, pass_time: str):
        """Sets the pass_time of this TcpServerLists.

        PassTime  # noqa: E501

        :param pass_time: The pass_time of this TcpServerLists.
        :type pass_time: str
        """

        self._pass_time = pass_time

    @property
    def pic_number(self) -> str:
        """Gets the pic_number of this TcpServerLists.

        PicNumber  # noqa: E501

        :return: The pic_number of this TcpServerLists.
        :rtype: str
        """
        return self._pic_number

    @pic_number.setter
    def pic_number(self, pic_number: str):
        """Sets the pic_number of this TcpServerLists.

        PicNumber  # noqa: E501

        :param pic_number: The pic_number of this TcpServerLists.
        :type pic_number: str
        """

        self._pic_number = pic_number

    @property
    def image_type(self) -> str:
        """Gets the image_type of this TcpServerLists.

        ImageType  # noqa: E501

        :return: The image_type of this TcpServerLists.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type: str):
        """Sets the image_type of this TcpServerLists.

        ImageType  # noqa: E501

        :param image_type: The image_type of this TcpServerLists.
        :type image_type: str
        """

        self._image_type = image_type

    @property
    def image_format(self) -> str:
        """Gets the image_format of this TcpServerLists.

        ImageFormat  # noqa: E501

        :return: The image_format of this TcpServerLists.
        :rtype: str
        """
        return self._image_format

    @image_format.setter
    def image_format(self, image_format: str):
        """Sets the image_format of this TcpServerLists.

        ImageFormat  # noqa: E501

        :param image_format: The image_format of this TcpServerLists.
        :type image_format: str
        """

        self._image_format = image_format

    @property
    def status(self) -> str:
        """Gets the status of this TcpServerLists.

        status  # noqa: E501

        :return: The status of this TcpServerLists.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this TcpServerLists.

        status  # noqa: E501

        :param status: The status of this TcpServerLists.
        :type status: str
        """

        self._status = status

    @property
    def pic_list(self) -> List[InlineResponse20019PicList]:
        """Gets the pic_list of this TcpServerLists.


        :return: The pic_list of this TcpServerLists.
        :rtype: List[InlineResponse20019PicList]
        """
        return self._pic_list

    @pic_list.setter
    def pic_list(self, pic_list: List[InlineResponse20019PicList]):
        """Sets the pic_list of this TcpServerLists.


        :param pic_list: The pic_list of this TcpServerLists.
        :type pic_list: List[InlineResponse20019PicList]
        """

        self._pic_list = pic_list
