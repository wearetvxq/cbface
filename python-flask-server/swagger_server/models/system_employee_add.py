# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SystemEmployeeAdd(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, topic: str=None, username: str=None, team: str=None, sex: int=None, status: int=None, remarks: str=None):  # noqa: E501
        """SystemEmployeeAdd - a model defined in Swagger

        :param topic: The topic of this SystemEmployeeAdd.  # noqa: E501
        :type topic: str
        :param username: The username of this SystemEmployeeAdd.  # noqa: E501
        :type username: str
        :param team: The team of this SystemEmployeeAdd.  # noqa: E501
        :type team: str
        :param sex: The sex of this SystemEmployeeAdd.  # noqa: E501
        :type sex: int
        :param status: The status of this SystemEmployeeAdd.  # noqa: E501
        :type status: int
        :param remarks: The remarks of this SystemEmployeeAdd.  # noqa: E501
        :type remarks: str
        """
        self.swagger_types = {
            'topic': str,
            'username': str,
            'team': str,
            'sex': int,
            'status': int,
            'remarks': str
        }

        self.attribute_map = {
            'topic': 'topic',
            'username': 'username',
            'team': 'team',
            'sex': 'sex',
            'status': 'status',
            'remarks': 'remarks'
        }

        self._topic = topic
        self._username = username
        self._team = team
        self._sex = sex
        self._status = status
        self._remarks = remarks

    @classmethod
    def from_dict(cls, dikt) -> 'SystemEmployeeAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SystemEmployeeAdd of this SystemEmployeeAdd.  # noqa: E501
        :rtype: SystemEmployeeAdd
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic(self) -> str:
        """Gets the topic of this SystemEmployeeAdd.

        employee topic url  # noqa: E501

        :return: The topic of this SystemEmployeeAdd.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic: str):
        """Sets the topic of this SystemEmployeeAdd.

        employee topic url  # noqa: E501

        :param topic: The topic of this SystemEmployeeAdd.
        :type topic: str
        """

        self._topic = topic

    @property
    def username(self) -> str:
        """Gets the username of this SystemEmployeeAdd.

        employee username  # noqa: E501

        :return: The username of this SystemEmployeeAdd.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this SystemEmployeeAdd.

        employee username  # noqa: E501

        :param username: The username of this SystemEmployeeAdd.
        :type username: str
        """

        self._username = username

    @property
    def team(self) -> str:
        """Gets the team of this SystemEmployeeAdd.

        team  # noqa: E501

        :return: The team of this SystemEmployeeAdd.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team: str):
        """Sets the team of this SystemEmployeeAdd.

        team  # noqa: E501

        :param team: The team of this SystemEmployeeAdd.
        :type team: str
        """

        self._team = team

    @property
    def sex(self) -> int:
        """Gets the sex of this SystemEmployeeAdd.

        employee sex  # noqa: E501

        :return: The sex of this SystemEmployeeAdd.
        :rtype: int
        """
        return self._sex

    @sex.setter
    def sex(self, sex: int):
        """Sets the sex of this SystemEmployeeAdd.

        employee sex  # noqa: E501

        :param sex: The sex of this SystemEmployeeAdd.
        :type sex: int
        """

        self._sex = sex

    @property
    def status(self) -> int:
        """Gets the status of this SystemEmployeeAdd.

        employee status  # noqa: E501

        :return: The status of this SystemEmployeeAdd.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this SystemEmployeeAdd.

        employee status  # noqa: E501

        :param status: The status of this SystemEmployeeAdd.
        :type status: int
        """

        self._status = status

    @property
    def remarks(self) -> str:
        """Gets the remarks of this SystemEmployeeAdd.

        employee remarks  # noqa: E501

        :return: The remarks of this SystemEmployeeAdd.
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks: str):
        """Sets the remarks of this SystemEmployeeAdd.

        employee remarks  # noqa: E501

        :param remarks: The remarks of this SystemEmployeeAdd.
        :type remarks: str
        """

        self._remarks = remarks
